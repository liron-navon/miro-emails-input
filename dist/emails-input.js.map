{"version":3,"sources":["lib/EmailsInput.ts","emails-input.ts"],"names":[],"mappings":";;;AA8GO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,sBAAA,EAAA,IAAA,EAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GA5GD,EAAmB,QACnB,EAAmB,QAEzB,EAAA,WAKI,SAAA,EAAoB,EAAkC,GAAlC,KAAA,YAAA,EAAkC,KAAA,QAAA,EAC7C,KAAA,OAAS,GACT,KAAA,qBAAqB,GA+FlC,OA3FI,EAAA,UAAA,UAAA,WACI,OAAA,EAAW,KAAK,SAIpB,EAAA,UAAA,SAAA,SAAS,GAAT,IAAA,EAAA,KACI,EAAM,MAAM,KAAK,QAAQ,SAAA,GACjB,GAAA,EAAa,OAAS,IAAM,EAAK,OAAO,SAAS,GAAe,CAC1D,IAAA,EAAU,EAAK,mBAAmB,GACxC,EAAK,OAAO,KAAK,GACjB,EAAK,QAAS,aAAa,EAAS,EAAK,eAM7C,EAAA,UAAA,qBAAR,SAA6B,GAA7B,IAAA,EAAA,KACI,EAAY,UAAY,GAElB,IAAA,EAAY,SAAS,cAAc,OACzC,EAAU,UAAY,uCACtB,EAAY,YAAY,GAEnB,KAAA,QAAU,SAAS,cAAc,OACjC,KAAA,QAAQ,UAAY,qCACzB,EAAU,YAAY,KAAK,SAEtB,KAAA,UAAY,KAAK,kBACjB,KAAA,QAAQ,YAAY,KAAK,WAE1B,KAAK,QAAQ,eACR,KAAA,QAAQ,cAAc,QAAQ,SAAA,GAAS,OAAA,EAAK,SAAS,MAK1D,EAAA,UAAA,gBAAR,WAAA,IAAA,EAAA,KACU,EAAQ,SAAS,cAAc,SACrC,EAAM,aAAa,OAAQ,QACtB,KAAA,QAAQ,aAAe,EAAM,aAAa,cAAe,KAAK,QAAQ,aAC3E,EAAM,UAAY,sBAEZ,IAAA,EAAkB,WAChB,EAAM,MAAM,OAAS,IACrB,EAAK,SAAS,EAAM,OACpB,EAAM,MAAQ,KAWf,OAPP,EAAM,iBAAiB,QAAS,WAAM,OAAA,MACtC,EAAM,iBAAiB,OAAQ,WAAM,OAAA,MACrC,EAAM,iBAAiB,QAAS,SAAA,GACvB,EAAM,OAAS,GAAoB,EAAM,OAAS,GAClD,MAGF,GAIH,EAAA,UAAA,aAAR,SAAqB,GACV,QAAE,EAAM,MAAM,mBAIjB,EAAA,UAAA,mBAAR,SAA2B,EAAsB,GACxC,KAAA,QAAS,YAAY,GACrB,KAAA,OAAS,KAAK,OAAO,OAAO,SAAA,GAAK,OAAA,IAAM,KAIxC,EAAA,UAAA,mBAAR,SAA2B,GAA3B,IAAA,EAAA,KAEU,EAAe,SAAS,cAAc,OAC5C,EAAa,WAAe,KAAK,aAAa,GACxC,4BACA,+BAA6B,uBAG7B,IAAA,EAAe,SAAS,cAAc,UAC5C,EAAa,UAAY,kBAGnB,IAAA,EAAW,SAAS,eAAe,GAMlC,OALP,EAAa,YAAY,GACzB,EAAa,YAAY,GAGzB,EAAa,iBAAiB,QAAS,WAAM,OAAA,EAAK,mBAAmB,EAAc,KAC5E,GAEf,EAtGA,GAyGO,QAAA,iBAAA,EAAA,IAAM,EAAc,SAAC,EAA0B,GAC3C,OAAA,IAAI,EAAiB,EAAa,IADtC,QAAA,YAAA;;AC1GP,aAJA,QAAA,gBACA,IAAA,EAAA,QAAA,qBAGA,OAAO,QAAU,EAAjB","file":"emails-input.js","sourceRoot":"../src","sourcesContent":["import { EmailsInputOptions } from './types';\n\nconst KEYUP_ENTER_CODE = 'Enter';\nconst KEYUP_COMMA_CODE = 'Comma';\n\nexport class EmailsInputClass {\n    private emails: string[];\n    private inputNode?: HTMLInputElement;\n    private content?: HTMLDivElement;\n\n    constructor(private rootElement: HTMLElement, private options: EmailsInputOptions) {\n        this.emails = [];\n        this.createInitialContent(rootElement);\n    }\n\n    // returns a copy of the current emails\n    getEmails(): string[] {\n        return [...this.emails];\n    }\n\n    // adds an email to the list and to the dom\n    addEmail(email: string): void {\n        email.split(',').forEach(emailAddress => {\n            if (emailAddress.length > 0 && !this.emails.includes(emailAddress)) {\n                const element = this.createEmailElement(emailAddress);\n                this.emails.push(emailAddress);\n                this.content!.insertBefore(element, this.inputNode!);\n            }\n        });\n    }\n\n    // creates the initial content for the emails library\n    private createInitialContent(rootElement: HTMLElement) {\n        rootElement.innerHTML = '';\n\n        const container = document.createElement('div');\n        container.className = 'emails-input emails-input__container';\n        rootElement.appendChild(container);\n\n        this.content = document.createElement('div');\n        this.content.className = 'emails-input emails-input__content';\n        container.appendChild(this.content);\n\n        this.inputNode = this.createInputNode();\n        this.content.appendChild(this.inputNode);\n\n        if (this.options.initialEmails) {\n            this.options.initialEmails.forEach(email => this.addEmail(email))\n        }\n    }\n\n    // creates an element used for inputting emails\n    private createInputNode() {\n        const input = document.createElement('input');\n        input.setAttribute('type', 'text');\n        this.options.placeHolder && input.setAttribute('placeholder', this.options.placeHolder);\n        input.className = 'emails-input__input';\n\n        const addEmailAddress = () => {\n            if (input.value.length > 0) {\n                this.addEmail(input.value);\n                input.value = '';\n            }\n        };\n\n        input.addEventListener('paste', () => addEmailAddress());\n        input.addEventListener('blur', () => addEmailAddress());\n        input.addEventListener('keyup', event => {\n             if (event.code === KEYUP_ENTER_CODE || event.code === KEYUP_COMMA_CODE) {\n                 addEmailAddress();\n             }\n        });\n        return input;\n    }\n\n    // checks if an email address is valid\n    private isValidEmail(email: string): boolean {\n        return !!email.match(/^\\S+@\\S+\\.\\S+$/)\n    }\n\n    // deletes an email element\n    private deleteEmailElement(element: HTMLElement, email: string) {\n        this.content!.removeChild(element);\n        this.emails = this.emails.filter(e => e !== email);\n    }\n\n    // creates an email element in the dom\n    private createEmailElement(email: string): HTMLElement {\n        // create an email element\n        const emailElement = document.createElement('div');\n        emailElement.className = `${this.isValidEmail(email) \n            ? 'emails-input__valid_email' \n            : 'emails-input__invalid_email'} emails-input__email`;\n\n        // create a delete button element\n        const deleteButton = document.createElement('button');\n        deleteButton.className = 'emails-input__x';\n\n        // build the email element content\n        const textNode = document.createTextNode(email);\n        emailElement.appendChild(textNode);\n        emailElement.appendChild(deleteButton);\n\n        // remove the email element\n        deleteButton.addEventListener('click', () => this.deleteEmailElement(emailElement, email));\n        return emailElement;\n    }\n}\n\n// syntactic sugar to export the specified API from the assignment (they didn't mention using a \"new\" keyword)\nexport const EmailsInput = (rootElement: HTMLElement, options: EmailsInputOptions) => {\n    return new EmailsInputClass(rootElement, options);\n};\n","import './style.scss';\nimport {EmailsInput } from './lib/EmailsInput';\n\n// exports as the default\nmodule.exports = EmailsInput;\n"]}